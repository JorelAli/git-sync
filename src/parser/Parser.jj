options {
	STATIC = false;
}

PARSER_BEGIN(Parser)

package parser;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("unused")
public class Parser {
	
	public static DirectoryStructure parse(String input) throws ParseException {
		InputStream inputStream = new ByteArrayInputStream(input.getBytes(Charset.forName("UTF-8")));
		return new Parser(inputStream).input();
	}
	
}

PARSER_END(Parser)

//Symbols
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < OPENCBRACKET : "{" > }
TOKEN : { < CLOSECBRACKET : "}" > }
TOKEN : { < SEMICOLON : ";" > }

//Keywords
TOKEN : { < USING : "using" > }
TOKEN : { < DOMAIN : "domain" > }
TOKEN : { < INSIDE : "inside" > }

//Other
TOKEN : { < NAME : (["A"-"Z", "a"-"z", "0"-"9", "_", "-", "."])+ > }

TOKEN : { < QUOTE : "\"" > : STRING_STATE }

<STRING_STATE> TOKEN: {
  < ENDQUOTE : <QUOTE> > : DEFAULT | < CHAR : ~["\""] >
}

//Whitespace & Comments
SKIP : { "\n" | "\r" | " " | "\t" }
SKIP : { < "#" (~["\r", "\n"])* > }

/** Main endpoint */
DirectoryStructure input() : { String domain; List<Repository> repos; Subdirectory d; List<Subdirectory> subDirs = new ArrayList<Subdirectory>(); } {
  	domain = domain()
  	repos = repos()
  	(
  	  d = inside()
  	  { subDirs.add(d); }
  	)*
	<EOF>
	{ return new DirectoryStructure(domain, repos, subDirs); }
}

Repository repo() : { boolean hidden; Token name;} {
	( < PLUS >  { hidden = false; }
	| < MINUS > { hidden = true; }
	)
	name = < NAME >
	{ return new Repository(name.image, hidden); }
}

Subdirectory inside() : { Token t; List<Repository> repos; Subdirectory sd; List<Subdirectory> nested = new ArrayList<Subdirectory>(); } {
	< INSIDE >
	t = < NAME >
	< OPENCBRACKET >
	repos = repos()
	(sd = inside()
{ nested.add(sd);
})*
	< CLOSECBRACKET >
	{ return new Subdirectory(t.image, repos, nested); }
}

List<Repository> repos() : { Repository repo; List<Repository> repos = new ArrayList<Repository>(); } {
	(
	  repo = repo()
	  { repos.add(repo); }
	)*
	{ return repos; }
}

String domain() : { StringBuilder builder = new StringBuilder(); Token t;} {
	< USING >
	< DOMAIN >
	< QUOTE >
	(
	  t = < CHAR >
	  { builder.append(t.image); }
	)*
	< ENDQUOTE >
	< SEMICOLON >
	{ return builder.toString(); }
}